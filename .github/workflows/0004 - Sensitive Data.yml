name: '0004 - Sensitive Data'

on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Domain you're targeting for deployment."
        type: choice
        required: true
        options:
        - accounts
        - kiwisaver
        - loans
      file_name:
        description: "File name on container. Filename should be the same as the target table."
        required: true
      key_space:
        description: "The keyspace where the table is located."
        required: true
      data_type:
        description: "Data type to be executed. CSV files to use DSBulk. CQL files will run script."
        required: true
        type: choice
        default: cql
        options:
          - cql
          - csv

jobs:
  dev:
    name: 'dev'
    env:
      ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_API_TOKEN }}
      AZURE_STORAGE_NAME: astradbdata
      AZURE_STORAGE_CONTAINER: astradb
      AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_BLOB_STORAGE_SENSITIVE_DATA_ACCESS_KEY }}
      TERM: linux
    runs-on: ubuntu-latest
    environment: dev
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: dataplane/${{ github.event.inputs.domain }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Download from blob storage
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az storage blob download --account-name $AZURE_STORAGE_NAME --container-name $AZURE_STORAGE_CONTAINER --name ${{ github.event.inputs.file_name }} --file ${{ github.event.inputs.file_name }} --account-key $AZURE_STORAGE_ACCESS_KEY --auth-mode key

      - name: Install Astra CLI
        continue-on-error: true
        run: curl -Ls "https://dtsx.io/get-astra-cli" | bash

      - name: Setup Astra CLI
        run: /home/runner/.astra/cli/astra setup --token $ASTRA_DB_APPLICATION_TOKEN

      - name: Run DSBulk (csv)
        if: github.event.inputs.data_type == 'csv'
        run: |
          file_name=${{ github.event.inputs.file_name }}
          echo "Filename: ${file_name}"
          file_name=${file_name/".csv"/""}
          echo "Filename: ${file_name}"
          /home/runner/.astra/cli/astra db load ${{ github.event.inputs.domain }} -url ${{ github.event.inputs.file_name }} -k ${{ github.event.inputs.key_space }} -t $file_name -header true --schema.allowMissingFields true
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -e "INSERT INTO ${{ github.event.inputs.domain }}.executed_scripts (script_name, triggered_by, execution_id, folder, execution_timestamp) VALUES ('${{ github.event.inputs.file_name }}', '${{github.triggering_actor}}', uuid(), 'AZ Blob - $AZURE_STORAGE_NAME / $AZURE_STORAGE_CONTAINER', dateof(now()))" --debug;
        
      - name: Run cql script
        if: github.event.inputs.data_type == 'cql'
        run: |
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -f ${{ github.event.inputs.file_name }}
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -e "INSERT INTO ${{ github.event.inputs.domain }}.executed_scripts (script_name, triggered_by, execution_id, folder, execution_timestamp) VALUES ('${{ github.event.inputs.file_name }}', '${{github.triggering_actor}}', uuid(), 'AZ Blob - $AZURE_STORAGE_NAME / $AZURE_STORAGE_CONTAINER', dateof(now()))" --debug;

  uat:
    name: 'uat'
    needs: dev
    env:
      ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_API_TOKEN }}
      AZURE_STORAGE_NAME: astradbdata
      AZURE_STORAGE_CONTAINER: astradb
      AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_BLOB_STORAGE_SENSITIVE_DATA_ACCESS_KEY }}
      TERM: linux
    runs-on: ubuntu-latest
    environment: uat
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: dataplane/${{ github.event.inputs.domain }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Download from blob storage
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az storage blob download --account-name $AZURE_STORAGE_NAME --container-name $AZURE_STORAGE_CONTAINER --name ${{ github.event.inputs.file_name }} --file ${{ github.event.inputs.file_name }} --account-key $AZURE_STORAGE_ACCESS_KEY --auth-mode key

      - name: Install Astra CLI
        continue-on-error: true
        run: curl -Ls "https://dtsx.io/get-astra-cli" | bash

      - name: Setup Astra CLI
        run: /home/runner/.astra/cli/astra setup --token $ASTRA_DB_APPLICATION_TOKEN

      - name: Run DSBulk (csv)
        if: github.event.inputs.data_type == 'csv'
        run: |
          file_name=${{ github.event.inputs.file_name }}
          echo "Filename: ${file_name}"
          file_name=${file_name/".csv"/""}
          echo "Filename: ${file_name}"
          /home/runner/.astra/cli/astra db load ${{ github.event.inputs.domain }} -url ${{ github.event.inputs.file_name }} -k ${{ github.event.inputs.key_space }} -t $file_name -header true --schema.allowMissingFields true
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -e "INSERT INTO ${{ github.event.inputs.domain }}.executed_scripts (script_name, triggered_by, execution_id, folder, execution_timestamp) VALUES ('${{ github.event.inputs.file_name }}', '${{github.triggering_actor}}', uuid(), 'AZ Blob - $AZURE_STORAGE_NAME / $AZURE_STORAGE_CONTAINER', dateof(now()))" --debug;
        
      - name: Run cql script
        if: github.event.inputs.data_type == 'cql'
        run: |
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -f ${{ github.event.inputs.file_name }}
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -e "INSERT INTO ${{ github.event.inputs.domain }}.executed_scripts (script_name, triggered_by, execution_id, folder, execution_timestamp) VALUES ('${{ github.event.inputs.file_name }}', '${{github.triggering_actor}}', uuid(), 'AZ Blob - $AZURE_STORAGE_NAME / $AZURE_STORAGE_CONTAINER', dateof(now()))" --debug;

  prod:
    name: 'prod'
    needs: uat
    env:
      ASTRA_DB_APPLICATION_TOKEN: ${{ secrets.ASTRA_API_TOKEN }}
      AZURE_STORAGE_NAME: astradbdata
      AZURE_STORAGE_CONTAINER: astradb
      AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_BLOB_STORAGE_SENSITIVE_DATA_ACCESS_KEY }}
      TERM: linux
    runs-on: ubuntu-latest
    environment: dev
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: dataplane/${{ github.event.inputs.domain }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Download from blob storage
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az storage blob download --account-name $AZURE_STORAGE_NAME --container-name $AZURE_STORAGE_CONTAINER --name ${{ github.event.inputs.file_name }} --file ${{ github.event.inputs.file_name }} --account-key $AZURE_STORAGE_ACCESS_KEY --auth-mode key

      - name: Install Astra CLI
        continue-on-error: true
        run: curl -Ls "https://dtsx.io/get-astra-cli" | bash

      - name: Setup Astra CLI
        run: /home/runner/.astra/cli/astra setup --token $ASTRA_DB_APPLICATION_TOKEN

      - name: Run DSBulk (csv)
        if: github.event.inputs.data_type == 'csv'
        run: |
          file_name=${{ github.event.inputs.file_name }}
          echo "Filename: ${file_name}"
          file_name=${file_name/".csv"/""}
          echo "Filename: ${file_name}"
          /home/runner/.astra/cli/astra db load ${{ github.event.inputs.domain }} -url ${{ github.event.inputs.file_name }} -k ${{ github.event.inputs.key_space }} -t $file_name -header true --schema.allowMissingFields true
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -e "INSERT INTO ${{ github.event.inputs.domain }}.executed_scripts (script_name, triggered_by, execution_id, folder, execution_timestamp) VALUES ('${{ github.event.inputs.file_name }}', '${{github.triggering_actor}}', uuid(), 'AZ Blob - $AZURE_STORAGE_NAME / $AZURE_STORAGE_CONTAINER', dateof(now()))" --debug;
        
      - name: Run cql script
        if: github.event.inputs.data_type == 'cql'
        run: |
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -f ${{ github.event.inputs.file_name }}
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -e "INSERT INTO ${{ github.event.inputs.domain }}.executed_scripts (script_name, triggered_by, execution_id, folder, execution_timestamp) VALUES ('${{ github.event.inputs.file_name }}', '${{github.triggering_actor}}', uuid(), 'AZ Blob - $AZURE_STORAGE_NAME / $AZURE_STORAGE_CONTAINER', dateof(now()))" --debug;
