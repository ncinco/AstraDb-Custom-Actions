name: 'AstraDB - Provision Database'
 
on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Domain you're targeting for deployment."
        type: choice
        required: true
        options:
        - accounts
        - kiwisaver
        - loans

jobs:
  dev:
    name: "dev"
    env:
      ASTRA_DB_API_TOKEN: ${{secrets.ASTRA_API_TOKEN}}
      ASTRA_ORG_API_TOKEN: ${{secrets.ASTRA_ORG_API_TOKEN}}
      ASTRA_DB_ID: ""
      TERM: linux
    runs-on: ubuntu-latest
    environment: dev
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout'
        id: checkout
        uses: actions/checkout@v3
    
      - name: Astra CLI - Install
        continue-on-error: true
        run: curl -Ls "https://dtsx.io/get-astra-cli" | bash
        
      - name: Astra CLI - Setup
        if: always()
        run: /home/runner/.astra/cli/astra setup --token $ASTRA_DB_API_TOKEN
          
      - name: Create Database
        if: always()
        run: |
          /home/runner/.astra/cli/astra db create ${{ github.event.inputs.domain }} -k ${{ github.event.inputs.domain }} -r australiaeast --if-not-exist --wait
          ASTRA_DB_ID=$(/home/runner/.astra/cli/astra db get sandbox --key id)
          
      - name: Create Keyspace (utilities)
        if: always()
        run: /home/runner/.astra/cli/astra db create-keyspace ${{ github.event.inputs.domain }} -k ${{ github.event.inputs.domain }} -k utilities --if-not-exist --wait
      
      - name: Create Base Schema
        if: always()
        run: |
          cd schemas
          /home/runner/.astra/cli/astra db cqlsh ${{ github.event.inputs.domain }} -f tables.cql --debug;

      - name: Create Api Read Role
        if: always()
        run: |
          cd roles
          JSON=$(cat api-read.json)
          JSON=${JSON/__DOMAIN__/${{ github.event.inputs.domain }}}
          JSON=${JSON/__ASTRA_ORG_ID__/$ASTRA_ORG_ID}
          JSON=${JSON/__ASTRA_DB_ID__/$ASTRA_DB_ID}
          curl -v POST https://api.astra.datastax.com/v2/organizations/roles -H "Authorization: Bearer $ASTRA_ORG_API_TOKEN" -d "$JSON"

      - name: Create Api Write Role
        if: always()
        run: |
          cd roles
          JSON=$(cat api-write.json)
          JSON=${JSON/__DOMAIN__/${{ github.event.inputs.domain }}}
          JSON=${JSON/__ASTRA_ORG_ID__/$ASTRA_ORG_ID}
          JSON=${JSON/__ASTRA_DB_ID__/$ASTRA_DB_ID}
          curl -v POST https://api.astra.datastax.com/v2/organizations/roles -H "Authorization: Bearer $ASTRA_ORG_API_TOKEN" -d "$JSON"

      - name: Create ApiTeam Dev Sandbox Role
        if: always()
        run: |
          cd roles
          JSON=$(cat apiteam-dev-sandbox.json)
          JSON=${JSON/__ASTRA_ORG_ID__/$ASTRA_ORG_ID}
          JSON=${JSON/__ASTRA_DB_SANDBOX_ID__/$ASTRA_DB_SANDBOX_ID}
          curl -v POST https://api.astra.datastax.com/v2/organizations/roles -H "Authorization: Bearer $ASTRA_ORG_API_TOKEN" -d "$JSON"

      - name: Create ApiTeam Dev Role
        if: always()
        run: |
          cd roles
          JSON=$(cat apiteam-dev.json)
          JSON=${JSON/__DOMAIN__/${{ github.event.inputs.domain }}}
          JSON=${JSON/__ASTRA_ORG_ID__/$ASTRA_ORG_ID}
          JSON=${JSON/__ASTRA_DB_ID__/$ASTRA_DB_ID}
          curl -v POST https://api.astra.datastax.com/v2/organizations/roles -H "Authorization: Bearer $ASTRA_ORG_API_TOKEN" -d "$JSON"
